/* Stack.h
Реализация структуры данных стек на основе статического массива с ручным изменением размера массива.
Хранимый тип данных: Value.
Объявлены операции:  PUSH, POP, FULL, INIT, RESIZE, CLEAR, PRINT.
*/

#ifndef STACK_H
#define STACK_H

#include "Stored_Value.h"

typedef struct Stack Stack;
struct Stack
{
	int sp;         // текущий указатель стека
	int capacity;   // емкость стека
	Value *sarray;  // массив значений стека
};

#define STACK_FULL  (-200)
#define STACK_EMPTY (-300)

// Поместить в стек величину *v. Вернуть новый указатель sp; если < 0 стек полон или ошибка
int SPUSH(Stack *stack, Value *v);

// Вернуть из стека в величину *v. Вернуть новый указатель sp; если < 0 стек пуст или ошибка
int SPOP(Stack *stack, Value *v);   

// Проверка, заполнен ли стек. Если заполнен, то возвращает STACK_FULL, если нет ноль. 
// Если ошибка, то возврат меньше ноля
int SFULL(Stack *stack);

// Инициализировать стек. Если он не пустой, удаляет содержимое. 
// Возвращает новый размер стека, если <= 0 - ошибка
int SINIT(Stack *stack, int capacity);

/* Изменить размер стека, вернуть sp. 
Если ошибка, то возвращает число меньше ноля, заполнение массива не меняется.
Если новый размер больше или равен предыдущему, то sp останется неизменным, 
если меньше, то стек будет полон и sp == capacity - 1 */
int SRESIZE(Stack *stack, int newcapacity);

// Удалить массив стека и сбросить переменные. Вернуть новую ёмкость == 0, иначе ошибка
int SCLEAR(Stack *stack);

// Печать стека, возврат число пройденных элементов стека
int SPRINT(Stack *stack);


#endif